<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class wiki.Content" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
return getTransferObject().init(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcreatedDate" access="public" returntype="date" default="date" hint="Accessor for property createdDate" output="false">
<cfscript>
return getTransferObject().getcreatedDate(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setcomment" access="public" returntype="void" default="void" hint="Mutator for property comment" output="false">
<cfargument name="comment" type="string" required="true" hint="The value to set comment to">
<cfscript>
getTransferObject().setcomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
return getTransferObject().getMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="removeCategory" access="public" returntype="void" default="void" hint="remove an object of type wiki.Category from the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="the object to remove">
<cfscript>
getTransferObject().removeCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setPropertyMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getCategoryMemento" access="public" returntype="array" default="array" hint="returns the memento for the manytomany Category" output="false">
<cfscript>
return getTransferObject().getCategoryMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
getTransferObject().copyValuesTo(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getClassName" access="public" returntype="string" default="string" hint="The class name of the TransferObject" output="false">
<cfscript>
return getTransferObject().getClassName(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsPersisted" access="public" returntype="boolean" default="boolean" hint="If this object is stored in the database" output="false">
<cfscript>
return getTransferObject().getIsPersisted(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="addCategory" access="public" returntype="void" default="void" hint="Add an object of type wiki.Category to the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to add">
<cfscript>
getTransferObject().addCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsProxy" access="public" returntype="boolean" default="boolean" hint="returns whether or not this is a proxy object. Since this is a TrasferObject, it returns false." output="false">
<cfscript>
return getTransferObject().getIsProxy(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setCategoryMemento" access="public" returntype="void" default="void" hint="set the state of composition manytomany 'Category'" output="false">
<cfargument name="memento" type="array" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setCategoryMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterDiscardTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterDeleteTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="emptyCategory" access="public" returntype="void" default="void" hint="empty the collection, with no change to loading'" output="false">
<cfscript>
getTransferObject().emptyCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getPageisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'Page' has been loaded yet" output="false">
<cfscript>
return getTransferObject().getPageisLoaded(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getUserMemento" access="public" returntype="struct" default="struct" hint="returns the memento for manytoone User" output="false">
<cfscript>
return getTransferObject().getUserMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setisReadOnly" access="public" returntype="void" default="void" hint="Mutator for property isReadOnly" output="false">
<cfargument name="isReadOnly" type="boolean" required="true" hint="The value to set isReadOnly to">
<cfscript>
getTransferObject().setisReadOnly(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterCreateTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getOriginalTransferObject" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns this object" output="false">
<cfscript>
return getTransferObject().getOriginalTransferObject(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setcontent" access="public" returntype="void" default="void" hint="Mutator for property content" output="false">
<cfargument name="content" type="string" required="true" hint="The value to set content to">
<cfscript>
getTransferObject().setcontent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getCategoryIterator" access="public" returntype="any" default="any" hint="return a java.util.Iterator of wiki.Category objects" output="false">
<cfscript>
return getTransferObject().getCategoryIterator(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="containsCategory" access="public" returntype="boolean" default="boolean" hint="If this array contains a particular instance of wiki.Category" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to look for">
<cfargument name="pkCheckOnly" type="boolean" required="false" hint="Expert/Transfer use only: only checks primary keys" default="false">
<cfscript>
return getTransferObject().containsCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setPageMemento" access="public" returntype="void" default="void" hint="set the state of composition manytoone 'Page'" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setPageMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="removePage" access="public" returntype="void" default="void" hint="remove the instance of wiki.Page" output="false">
<cfscript>
getTransferObject().removePage(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getisActive" access="public" returntype="boolean" default="boolean" hint="Accessor for property isActive" output="false">
<cfscript>
return getTransferObject().getisActive(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getCategoryisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'Category' has been loaded yet" output="false">
<cfscript>
return getTransferObject().getCategoryisLoaded(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setUserMemento" access="public" returntype="void" default="void" hint="set the state of composition manytoone 'User'" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setUserMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
return getTransferObject().getPropertyMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getversion" access="public" returntype="numeric" default="numeric" hint="Accessor for property version" output="false">
<cfscript>
return getTransferObject().getversion(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
return getTransferObject().equalsTransfer(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setUser" access="public" returntype="void" default="void" hint="Mutator for User, security.User" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The security.User to set">
<cfscript>
getTransferObject().setUser(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setversion" access="public" returntype="void" default="void" hint="Mutator for property version" output="false">
<cfargument name="version" type="numeric" required="true" hint="The value to set version to">
<cfscript>
getTransferObject().setversion(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getCategory" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns the wiki.Category object at the given index in the array" output="false">
<cfargument name="index" type="numeric" required="true" hint="The index in the array to retrieve">
<cfscript>
return getTransferObject().getCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="clone" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Get a deep clone of this object" output="false">
<cfscript>
return getTransferObject().clone(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
getTransferObject().actionAfterUpdateTransferEvent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcomment" access="public" returntype="string" default="string" hint="Accessor for property comment" output="false">
<cfscript>
return getTransferObject().getcomment(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="removeUser" access="public" returntype="void" default="void" hint="remove the instance of security.User" output="false">
<cfscript>
getTransferObject().removeUser(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="hasPage" access="public" returntype="boolean" default="boolean" hint="Whether or not this object contains a wiki.Page" output="false">
<cfscript>
return getTransferObject().hasPage(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="findCategory" access="public" returntype="numeric" default="numeric" hint="Find the index number that the given object is at in the Array. Returns -1 if it can't be found.'" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to search for">
<cfscript>
return getTransferObject().findCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setPage" access="public" returntype="void" default="void" hint="Mutator for Page, wiki.Page" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The wiki.Page to set">
<cfscript>
getTransferObject().setPage(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="sortCategory" access="public" returntype="void" default="void" hint="Sort all elements in the array Category" output="false">
<cfscript>
getTransferObject().sortCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getUser" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Accessor for User, security.User" output="false">
<cfscript>
return getTransferObject().getUser(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="clearCategory" access="public" returntype="void" default="void" hint="Clear all the elements from the array" output="false">
<cfscript>
getTransferObject().clearCategory(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="hasUser" access="public" returntype="boolean" default="boolean" hint="Whether or not this object contains a security.User" output="false">
<cfscript>
return getTransferObject().hasUser(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getPage" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Accessor for Page, wiki.Page" output="false">
<cfscript>
return getTransferObject().getPage(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setisActive" access="public" returntype="void" default="void" hint="Mutator for property isActive" output="false">
<cfargument name="isActive" type="boolean" required="true" hint="The value to set isActive to">
<cfscript>
getTransferObject().setisActive(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getisReadOnly" access="public" returntype="boolean" default="boolean" hint="Accessor for property isReadOnly" output="false">
<cfscript>
return getTransferObject().getisReadOnly(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setcreatedDate" access="public" returntype="void" default="void" hint="Mutator for property createdDate" output="false">
<cfargument name="createdDate" type="date" required="true" hint="The value to set createdDate to">
<cfscript>
getTransferObject().setcreatedDate(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcontent" access="public" returntype="string" default="string" hint="Accessor for property content" output="false">
<cfscript>
return getTransferObject().getcontent(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
getTransferObject().setMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getLoadedObject" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns itself, as there is no object to load" output="false">
<cfscript>
return getTransferObject().getLoadedObject(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getcontentID" access="public" returntype="uuid" default="uuid" hint="Accessor for property contentID" output="false">
<cfscript>
return getTransferObject().getcontentID(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getPageMemento" access="public" returntype="struct" default="struct" hint="returns the memento for manytoone Page" output="false">
<cfscript>
return getTransferObject().getPageMemento(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getUserisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'User' has been loaded yet" output="false">
<cfscript>
return getTransferObject().getUserisLoaded(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsLoaded" access="public" returntype="boolean" default="boolean" hint="easy way to determine if the data is loaded, since this is a TransferObject, it must be loaded, and therefore returns true." output="false">
<cfscript>
return getTransferObject().getIsLoaded(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsDirty" access="public" returntype="boolean" default="boolean" hint="If this object's data is differnt from that stored in the DB." output="false">
<cfscript>
return getTransferObject().getIsDirty(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getCategoryArray" access="public" returntype="array" default="array" hint="returns the entire array of wiki.Category" output="false">
<cfscript>
return getTransferObject().getCategoryArray(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="getIsClone" access="public" returntype="boolean" default="boolean" hint="If this object is a clone or not" output="false">
<cfscript>
return getTransferObject().getIsClone(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="sameTransfer" access="public" returntype="boolean" default="boolean" hint="Checks to see if 2 transfer objects are the same" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="Yes" hint="The transfer object to check if we are equal">
<cfscript>
return getTransferObject().sameTransfer(argumentCollection=arguments);</cfscript>
</cffunction>

<cffunction name="setcontentID" access="public" returntype="void" default="void" hint="Mutator for property contentID" output="false">
<cfargument name="contentID" type="uuid" required="true" hint="The value to set contentID to">
<cfscript>
getTransferObject().setcontentID(argumentCollection=arguments);</cfscript>
</cffunction>


